const bcrypt = require('bcryptjs'); //require the bcrypt package
const User = require('../../model/User'); //require the user model
const { AppErr, appErr } = require('../../utils/appErr'); //require the AppError class and the appErrorfunction
const generateToken = require('../../utils/generateToken'); //require the generateToken function

//Register User
const registerUserCtrl = async (req, res, next) => {
    //destructure the request body
    const {fullname, password, email} = req.body;
    try {
    //check if the user already exists by checking email
    const userFound = await User.findOne({email});
    if (userFound) {
        return next(appErr('User already exists', 400)) //sends an error message and status code
    }
    //check if any fields are empty
    if (!fullname ||!email ||!password) {
        return next(appErr('Fields cannot be empty', 400)) //sends an error message and status code
    }
    //hash the user password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);
    //create a new user
    const user = await User.create({
        fullname,
        email,
        password: hashedPassword
    });
    res.json({
        status: 'success',
        fullname: user.fullname,
        email: user.email,
        id: user._id,
    });
    } catch (error) {   
        next(new Error(error)); //this handles any other errors that might come from mongoDB
    }
 };

//Login User
const userLoginCtrl = async (req, res, next) => {
    //destructure the request body
    const { email, password } = req.body;
    try {
      //check if email exists
      const userFound = await User.findOne({ email });
      if (!userFound) return next(new AppErr("Invalid login credentials", 400));
  
      //check for password validity
      const isPasswordMatch = await bcrypt.compare(password, userFound.password);
      if (!isPasswordMatch)
        return next(new AppErr("Invalid login credentials", 400));
  
      res.json({
        status: "success",
        fullname: userFound.fullname,
        id: userFound._id,
        token: generateToken(userFound._id), //the token generated by jsonwebtoken will be sent back to the user and saved in their browser session
      });
    } catch (error) {
      next(new AppErr(error.message, 500));
    }
  };


//Get User Profile by ID
const userProfileCtrl = async (req, res) => {
    try {
        const user = await User.findById(req.user).populate({
            path: "accounts",
            populate: {
                path: "transactions",
                model: "Transaction",
            },
        }) //find the user by id passed in the request object and populate it
        res.json(user);
    } catch (error) {   
        res.json(error);
    }
};

//Update User by ID
const updateUserCtrl = async (req, res, next) => {
    try {
      //Check if email account exists
      if (req.body.email) {
        const userFound = await User.findOne({ email: req.body.email });
        if (userFound)
          return next(
            new AppErr("Email is already in use", 400)
          );
      }
  
      //Check if user is updating the password
      if (req.body.password) {
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(req.body.password, salt);
        //Update the user
        const user = await User.findByIdAndUpdate(
          req.user,
          {
            password: hashedPassword,
          },
          {
            new: true,
            runValidators: true,
          }
        );
        //Send the response
        return res.status(200).json({
          status: "success",
          data: user,
        });
      }
      const user = await User.findByIdAndUpdate(req.user, req.body, {
        new: true,
        runValidators: true,
      });
      //Send the response
      return res.status(200).json({
        status: "success",
        data: user,
      });
    } catch (error) {
      next(new AppErr(error.message, 500));
    }
  };

//Delete User by ID
const deleteUserCtrl = async (req, res, next) => {
    try {
      await User.findByIdAndDelete(req.user);
      return res.status(200).json({
        status: "success",
        data: null,
      });
      res.json({ msg: "delete route" });
    } catch (error) {
      next(new AppErr(error.message, 500));
    }
  };

//Since we are exporting multiple functions, we export them as objects
module.exports = {
    registerUserCtrl,
    userLoginCtrl,
    userLoginCtrl,
    userProfileCtrl,
    updateUserCtrl,
    deleteUserCtrl,
};